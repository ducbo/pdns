# insert or update domain in database

- name: Ansible Workaround - If IPv4 of secondary nameserver is undefined, set variable explicitely to NULL
  set_fact:
    db_secondary_ns_ipv4: NULL
  when: nsupdate.basedomain.secondary_ns.ipv4 is undefined

- name: Ansible Workaround - If IPv4 of secondary nameserver is defined, set variable to that value
  set_fact:
    db_secondary_ns_ipv4: "{{ nsupdate.basedomain.secondary_ns.ipv4 }}"
  when: nsupdate.basedomain.secondary_ns.ipv4 is defined

- name: Check if basedomain is already in database
  postgresql_query:
    db: nsupdate
    login_host: localhost
    login_user: "{{ postgresql.username }}"
    login_password: "{{ postgresql.password }}"
    query: SELECT id,nameserver_update_secret,public,available,nameserver2_ip FROM main_domain WHERE name = %s
    positional_args:
    - "{{ nsupdate.basedomain.name }}"
  register: select_domain_id_from_db

- name: Update basedomain database entry
  postgresql_query:
    db: nsupdate
    login_host: localhost
    login_user: "{{ postgresql.username }}"
    login_password: "{{ postgresql.password }}"
    query: UPDATE main_domain SET nameserver_update_secret = %s, public = %s, nameserver2_ip = %s WHERE id = %s
    positional_args:
    - "{{ basedomain_secret }}"
    - "{{ (nsupdate.basedomain.public | default(false)) | ternary('t','f') }}"
    - "{{ db_secondary_ns_ipv4 }}"
    - "{{ select_domain_id_from_db.query_result[0].id }}"
  when: select_domain_id_from_db.rowcount == 1 and (
        select_domain_id_from_db.query_result[0].nameserver_update_secret != basedomain_secret or
        select_domain_id_from_db.query_result[0].nameserver2_ip != db_secondary_ns_ipv4 or
        select_domain_id_from_db.query_result[0].public != nsupdate.basedomain.public | default(false))

- name: Insert basedomain into database
  postgresql_query:
    db: nsupdate
    login_host: localhost
    login_user: "{{ postgresql.username }}"
    login_password: "{{ postgresql.password }}"
    query: >
        INSERT INTO main_domain
        (name,nameserver_ip,nameserver_update_secret,nameserver_update_algorithm,public,available,comment,last_update,created,created_by_id,nameserver2_ip)
        VALUES (%s,%s,%s,%s,%s,%s,%s,NOW(),NOW(),(SELECT id FROM auth_user WHERE username=%s),%s)
    positional_args:
    - "{{ nsupdate.basedomain.name }}"
    - "{{ ansible_default_ipv4.address }}"
    - "{{ basedomain_secret }}"
    - "HMAC_SHA512"
    - "{{ (nsupdate.basedomain.public | default(false)) | ternary('t','f') }}"
    - "{{ (nsupdate.basedomain.available | default(true)) | ternary('t','f') }}"
    - "Ansible managed"
    - "{{ nsupdate.django_superuser.username }}"
    - "{{ db_secondary_ns_ipv4 }}"
  when: select_domain_id_from_db.rowcount == 0
